  // Download multi-subject Excel template with separate tabs for each subject
  app.get('/api/assessments/template-multi/:classId', authenticate, async (req, res) => {
    try {
      const user = (req as any).user;
      if (user.role !== 'admin' && user.role !== 'sub-admin') {
        return res.status(403).json({ error: "Admin access required" });
      }

      const { classId } = req.params;

      // Get class info
      const classInfo = await storage.getClassById(classId);
      if (!classInfo) {
        return res.status(404).json({ error: "Class not found" });
      }

      // Get students from the class
      const studentsInClass = await storage.getStudentsByClass(classId);
      if (studentsInClass.length === 0) {
        return res.status(404).json({ error: "No students in this class" });
      }

      // Get subjects assigned to this class and remove duplicates by ID
      const allSubjects = await storage.getClassSubjects(classId);
      const subjectMap = new Map();
      allSubjects.forEach(subject => {
        if (!subjectMap.has(subject.id)) {
          subjectMap.set(subject.id, subject);
        }
      });
      const subjects = Array.from(subjectMap.values());

      if (subjects.length === 0) {
        return res.status(404).json({ error: "No subjects assigned to this class" });
      }

      // Create new Excel workbook
      const wb = XLSX.utils.book_new();

      // Create a sheet for each subject
      for (const subject of subjects) {
        // Prepare student data rows
        const rows = studentsInClass.map(student => ({
          'Student ID': student.studentId,
          'Student Name': `${student.user.firstName} ${student.user.lastName}`,
          'First CA': '',
          'Second CA': '',
          'Exam': ''
        }));

        // Convert to worksheet
        const worksheet = XLSX.utils.json_to_sheet(rows);

        // Set column widths
        worksheet['!cols'] = [
          { width: 15 },
          { width: 25 },
          { width: 12 },
          { width: 12 },
          { width: 12 }
        ];

        // Excel sheet names must be <= 31 characters and unique
        let sheetName = subject.name.substring(0, 31);

        // Add sheet to workbook
        XLSX.utils.book_append_sheet(wb, worksheet, sheetName);
      }

      // Generate Excel file buffer
      const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });

      // Create filename
      const filename = `${classInfo.name.replace(/\s+/g, '-')}-All-Subjects.xlsx`;

      // Send file
      res.set({
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': buffer.length
      });

      res.send(buffer);

    } catch (error) {
      console.error("Multi-subject template error:", error);
      res.status(500).json({ 
        error: "Failed to generate template", 
        details: error instanceof Error ? error.message : String(error) 
      });
    }
  });
